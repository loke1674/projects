# -*- coding: utf-8 -*-
"""customer_behaviour_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OPQA-HHe-nzBffTYu7rpJTgZ9Wf_Enj6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

df=pd.read_csv("/content/sample_data/ecommerce_customer_data.csv")
df

df.isnull().sum()

df.duplicated().sum()

df1=df['Device_Type'].value_counts()
df1=pd.DataFrame({'device type':df1.index,"count":df1.values})
sns.barplot(x='device type',y='count',data=df1,hue='device type')
plt.show()

"""analysis 1: from the above graph we can infer that most of the customers used mobile for their purchase followed by tablet and desktop

"""

df['unplaced_rders']=df['Items_Added_to_Cart']-df['Total_Purchases']
df

dfmale=df['Gender'].value_counts()
dfmale=pd.DataFrame({'gender':dfmale.index,'count':dfmale.values})
plt.figure(figsize=(10,3))
plt.pie(dfmale['count'],labels=dfmale['gender'],autopct="%.2f%%")
plt.show()

"""most of the purchases has been done by male customers compared to female customers

Geographic analysis
"""

df_geo=df['Location'].value_counts()
df_geo=pd.DataFrame({'location':df_geo.index,'counts':df_geo.values})
df_geo
plt.figure(figsize=(10,2))
sns.barplot(x='location',y='counts',data=df_geo,hue='location')
plt.title('highest purchases by location')
plt.xlabel('location')
plt.ylabel('total visit')

df.describe()

bins=np.linspace(df['Age'].min(),df['Age'].max(),3)
bins

plt.hist(x=df['Age'],bins=bins)
plt.show()

plt.scatter(df['Product_Browsing_Time'],df['Total_Purchases'],color='b')
plt.show()

dff=df.select_dtypes(include='number')
dff1=dff.corr()
sns.heatmap(dff1,annot=True,fmt='.2f')
plt.show()

df['clv']=(df['Total_Purchases']*df['Total_Pages_Viewed'])/df['Age']
df

da=np.linspace(df['clv'].min(),df['clv'].max(),4)
da

df['segment']=pd.cut(df['clv'],bins=da,labels=['low','medium','high'])
df

seg=df['segment'].value_counts()
seg=pd.DataFrame({'segment':seg.index,'count':seg.values})
seg
sns.barplot(x='segment',y='count',data=seg,hue='segment')
plt.show()